------------------------------------------------------------------------
-- TIPOS / DADOS
------------------------------------------------------------------------
N = 3
id_vendedor = { 1..N }
id_comprador = { 1..(N+3) }
datatype produto = notebook | tablet | impressora | celular

------------------------------------------------------------------------
-- CANAIS / EVENTOS
------------------------------------------------------------------------

channel vender, iniciarLeilao : id_vendedor.produto
channel comprar, efetuarLance : id_comprador.produto
channel verificarProduto, registrarLance : id_comprador.produto
channel encerrarLeilao : produto
channel efetuarLance

------------------------------------------------------------------------
-- COMPRADOR(ES) / VENDEDOR(ES)
------------------------------------------------------------------------

COMPRADOR(id, produto) = 
		comprar!id!produto -> COMPRADOR(id, produto)

COMPRADORES = ||| comprador:id_comprador, p:produto @ COMPRADOR(comprador, p) 

assert COMPRADORES :[deadlock free] 
assert COMPRADORES :[deterministic] 


VENDEDOR(id, produto) = 
		vender!id!produto -> VENDEDOR(id, produto)	

VENDEDORES = ||| id:id_vendedor, p:produto @ VENDEDOR(id, p)

assert VENDEDORES :[deadlock free] 
assert VENDEDORES :[deterministic] 

------------------------------------------------------------------------
-- INTERFACE
------------------------------------------------------------------------

existeProduto(produto, lista) = 
	if card(verificacao(produto, set(lista))) > 0 then True else False

verificacao(produto, C) = { p | (v,p) <- C, p == produto}


INTERFACE = 
		vender?vendedor?produto -> iniciarLeilao!vendedor!produto -> INTERFACE
	[]
		comprar?comprador?produto -> verificarProduto!comprador!produto -> INTERFACE
			
assert INTERFACE :[deadlock free] 
assert INTERFACE :[deterministic] 


SERVIDOR(leiloes) = 
		(iniciarLeilao?vendedor?produto ->
			if not existeProduto(produto, leiloes) then 
				SERVIDOR(leiloes^<(vendedor, produto)>)
			else
				SERVIDOR(leiloes)
		)
	[] 
		verificarProduto?comprador?produto -> 	
			if existeProduto(produto, leiloes) then
				SERVIDOR(leiloes)
			else
				SERVIDOR(leiloes)
	[]
		encerrarLeilao?produto -> SERVIDOR(leiloes)

assert SERVIDOR(<>) :[deadlock free] 
assert SERVIDOR(<>) :[deterministic] 		

------------------------------------------------------------------------
-- ASSERTS
------------------------------------------------------------------------ 

