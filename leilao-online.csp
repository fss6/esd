------------------------------------------------------------------------
-- TIPOS / DADOS
------------------------------------------------------------------------
N = 2
id_vendedor = { 1..N }
id_comprador = { 1..(N+1) }
datatype produto = notebook | tablet

------------------------------------------------------------------------
-- CANAIS / EVENTOS
------------------------------------------------------------------------

channel vender, iniciarLeilao : id_vendedor.produto
channel comprar, cadastrar, efetuarLance, registrarLance : id_comprador.produto
channel encerrarLeilao, cadastrarComprador, validarLance

------------------------------------------------------------------------
-- COMPRADOR(ES) / VENDEDOR(ES)
------------------------------------------------------------------------

COMPRADOR(id, produto) = 
		comprar!id!produto -> COMPRADOR(id, produto)
	[]
		efetuarLance!id!produto -> COMPRADOR(id, produto)

COMPRADORES = ||| comprador:id_comprador, p:produto @ COMPRADOR(comprador, p) 

assert COMPRADORES :[deadlock free] 
assert COMPRADORES :[deterministic] 


VENDEDOR(id, produto) = 
		vender!id!produto -> VENDEDOR(id, produto)	

VENDEDORES = ||| id:id_vendedor, p:produto @ VENDEDOR(id, p)

assert VENDEDORES :[deadlock free] 
assert VENDEDORES :[deterministic] 

------------------------------------------------------------------------
-- INTERFACE
------------------------------------------------------------------------

INTERFACE = 
		vender?vendedor?produto -> iniciarLeilao!vendedor!produto -> INTERFACE
	[]
		comprar?comprador?produto -> cadastrar!comprador!produto -> INTERFACE
	[]
		efetuarLance?comprador?produto -> registrarLance!comprador!produto -> INTERFACE
			
assert INTERFACE :[deadlock free] 
assert INTERFACE :[deterministic] 

------------------------------------------------------------------------
-- SERVIDOR
------------------------------------------------------------------------
-- "Verifica se o um dado produto existe em uma determinada sequencia."
existeProduto(produto, S) = 
	if card(verificacaoProduto(produto, set(S))) > 0 then True else False

verificacaoProduto(produto, C) = { p | (v,p) <- C, p == produto}
------------------------------------------------------------------------
-- "Verifica se existe a tupla (comprador,produto) em uma dada sequencia."
existeCompradorProduto(comprador,produto,S) = 
	if card(verificacaoCompradorProduto(comprador,produto, set(S))) > 0 then True else False

verificacaoCompradorProduto(comprador,produto,C) = { (c,p) | (c,p) <- C, (c,p) == (comprador,produto)}
------------------------------------------------------------------------
-- "Remove um dado produto de uma determinada Sequencia."
remover(produto,S) =
		seq(efetuarRemocao(produto, set(S)))	

efetuarRemocao(produto, C) =
		{(id,p) | (id,p) <- C, p != produto}


SERVIDOR(leiloes, compradores) = 
		(iniciarLeilao?vendedor?produto ->
			if not existeProduto(produto, leiloes) then 
				SERVIDOR(leiloes^<(vendedor, produto)>, compradores)
			else
				SERVIDOR(leiloes, compradores)
		)
	[] 
		(cadastrar?comprador?produto -> 	
			if not existeCompradorProduto(comprador,produto,compradores) then 
				cadastrarComprador -> SERVIDOR(leiloes, compradores^<(comprador, produto)>)
			else
				SERVIDOR(leiloes, compradores)
		)	
	[]
		(registrarLance?comprador?produto ->
			if existeCompradorProduto(comprador,produto,compradores) then 
				validarLance -> ( SERVIDOR(leiloes, compradores)
				|~|	encerrarLeilao -> SERVIDOR(remover(produto,leiloes),remover(produto,compradores)))
			else
				SERVIDOR(leiloes, compradores)
		)

assert SERVIDOR(<>,<>) :[deadlock free] 
assert SERVIDOR(<>,<>) :[deterministic] 		

------------------------------------------------------------------------
-- ASSERTS SISTEMA
------------------------------------------------------------------------ 

SI = SERVIDOR(<>,<>) [|{|iniciarLeilao, cadastrar, registrarLance|}|] INTERFACE
SIC =  SI [|{|comprar, efetuarLance|}|] COMPRADORES
SICV = SIC [|{|vender|}|] VENDEDORES
assert SICV :[deadlock free] 
assert SICV :[deterministic] 

------------------------------------------------------------------------
-- REFINAMENTO
------------------------------------------------------------------------ 

S2(leiloes, compradores) = 
		(iniciarLeilao?vendedor?produto ->
			if not existeProduto(produto, leiloes) then 
				S2(leiloes^<(vendedor, produto)>, compradores)
			else
				S2(leiloes, compradores)
		)
	[] 
		(cadastrar?comprador?produto -> 	
			if not existeCompradorProduto(comprador,produto,compradores) then 
				cadastrarComprador -> S2(leiloes, compradores^<(comprador, produto)>)
			else
				S2(leiloes, compradores)
		)	
	[]
		(registrarLance?comprador?produto ->
			if existeCompradorProduto(comprador,produto,compradores) then 
				validarLance -> ( S2(leiloes, compradores)
				[]	encerrarLeilao -> S2(remover(produto,leiloes),remover(produto,compradores)))
			else
				S2(leiloes, compradores)
		)

assert S2(<>,<>) :[deadlock free] 
assert S2(<>,<>) :[deterministic]
assert S2(<>,<>) [T= SERVIDOR(<>,<>)
assert SERVIDOR(<>,<>) [T= S2(<>,<>)

