------------------------------------------------------------------------
-- TIPOS E DADOS
------------------------------------------------------------------------
N = 3
id_comprador = { 1..(N+2) }
id_vendedor = { 1..N }
datatype produto = notebook | tablet | impressora

------------------------------------------------------------------------
-- CANAIS
------------------------------------------------------------------------

channel vender, abrirLeilao : id_vendedor.produto
channel comprar : id_comprador.produto
channel cadastrarComprador, efetuarLance, registrarLance : id_comprador.produto
channel encerrarLeilao : produto

------------------------------------------------------------------------
-- COMPRADOR(ES) E VENDEDOR(ES)
------------------------------------------------------------------------

COMPRADOR(id, produto) = 
		cadastrarComprador!id!produto -> COMPRADOR(id, produto)
	[]
		efetuarLance!id!produto -> COMPRADOR(id, produto)

COMPRADORES = ||| comprador:id_comprador, p:produto @ COMPRADOR(comprador, p) 

assert COMPRADORES :[deadlock free] 
assert COMPRADORES :[deterministic] 


VENDEDOR(id, produto) = 
		vender!id!produto -> VENDEDOR(id, produto)	

VENDEDORES = ||| id:id_vendedor, p:produto @ VENDEDOR(id, p)

--{ p_ | p_ <- produto, p_ != Nil}

assert VENDEDORES :[deadlock free] 
assert VENDEDORES :[deterministic] 

------------------------------------------------------------------------
-- LEILAO
------------------------------------------------------------------------

queroComprarProduto(pv, pc) = 
		if pv == pc then 
			True 
		else 
			False

verificarLance(lance, valorDoProduto) = 
		if lance == valorDoProduto then 
			True 
		else 
			False 

SERVIDOR = 
		vender?vendedor?produto -> abrirLeilao!vendedor!produto -> SERVIDOR
	[]
		comprar?comprador?produto -> cadastrarComprador!comprador!produto -> SERVIDOR
	[]
		efetuarLance?comprador?produto -> registrarLance!comprador!produto ->
		((encerrarLeilao!produto -> SERVIDOR) |~| SERVIDOR)

			
assert SERVIDOR :[deadlock free] 
assert SERVIDOR :[deterministic] 

produtoUnico(produto, <>)             = True
produtoUnico(produto, <(v,p)>^lista) = if produto == p then 
											False 
										 else 
											produtoUnico(produto, lista)

BUFFER(leiloes) = 
		abrirLeilao?vendedor?produto:{ p | p <- produto, produtoUnico( p, leiloes)} -> BUFFER(leiloes^<(vendedor, produto)>)
	[]
		cadastrarComprador?comprador?produto -> BUFFER(leiloes)
	[] 
		registrarLance?comprador?produto -> BUFFER(leiloes)
	[]
		encerrarLeilao?produto -> BUFFER(leiloes)

assert BUFFER(<>) :[deadlock free] 
assert BUFFER(<>) :[deterministic] 		

------------------------------------------------------------------------
-- ASSERTS
------------------------------------------------------------------------ 

